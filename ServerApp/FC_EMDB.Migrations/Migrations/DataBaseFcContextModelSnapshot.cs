// <auto-generated />
using System;
using FC_EMDB.Database.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FC_EMDB.Migrations.Migrations
{
    [DbContext(typeof(DataBaseFcContext))]
    partial class DataBaseFcContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FC_EMDB.Entities.Entities.AbonementStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DaysFreezeCount");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("AbonementStatuses");
                });

            modelBuilder.Entity("FC_EMDB.Entities.Entities.AbonementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("AbonementTypes");
                });

            modelBuilder.Entity("FC_EMDB.Entities.Entities.CoachTraining", b =>
                {
                    b.Property<int>("CoachId");

                    b.Property<int>("TrainingId");

                    b.HasKey("CoachId", "TrainingId");

                    b.HasIndex("TrainingId");

                    b.ToTable("CoachTrainings");
                });

            modelBuilder.Entity("FC_EMDB.Entities.Entities.Gym", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capacity");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Gyms");
                });

            modelBuilder.Entity("FC_EMDB.Entities.Entities.Human", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfBirdth");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("Photo");

                    b.HasKey("Id");

                    b.ToTable("Human");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Human");
                });

            modelBuilder.Entity("FC_EMDB.Entities.Entities.ProgramType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ProgramType");
                });

            modelBuilder.Entity("FC_EMDB.Entities.Entities.ReplcedTraining", b =>
                {
                    b.Property<int>("TrainingDataId");

                    b.Property<int>("TrainingId");

                    b.HasKey("TrainingDataId", "TrainingId");

                    b.HasIndex("TrainingId");

                    b.ToTable("ReplcedTraining");
                });

            modelBuilder.Entity("FC_EMDB.Entities.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("FC_EMDB.Entities.Entities.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndTime");

                    b.Property<int>("GymId");

                    b.Property<bool>("IsFinished");

                    b.Property<bool>("IsReplaced");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("GymId");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("FC_EMDB.Entities.Entities.TrainingClient", b =>
                {
                    b.Property<int>("TrainingId");

                    b.Property<int>("ClientId");

                    b.Property<DateTime>("ComeInTime");

                    b.Property<DateTime>("ComeOutTime");

                    b.Property<bool>("IsComeIn");

                    b.HasKey("TrainingId", "ClientId");

                    b.HasIndex("ClientId");

                    b.ToTable("TrainingClients");
                });

            modelBuilder.Entity("FC_EMDB.Entities.Entities.TrainingData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsMustPay");

                    b.Property<bool>("IsNewTraining");

                    b.Property<bool>("Ispopular");

                    b.Property<int?>("LevelId");

                    b.Property<int?>("ProgramTypeId");

                    b.Property<string>("TrainingDescription");

                    b.Property<string>("TrainingName");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("ProgramTypeId");

                    b.ToTable("TrainingData");
                });

            modelBuilder.Entity("FC_EMDB.Entities.Entities.TrainingDataTraining", b =>
                {
                    b.Property<int>("TrainingDataId");

                    b.Property<int>("TrainingId");

                    b.HasKey("TrainingDataId", "TrainingId");

                    b.HasIndex("TrainingId");

                    b.ToTable("TrainingDataTraining");
                });

            modelBuilder.Entity("FC_EMDB.Entities.Entities.TrainingLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("TrainingLevel");
                });

            modelBuilder.Entity("FC_EMDB.Entities.Entities.Client", b =>
                {
                    b.HasBaseType("FC_EMDB.Entities.Entities.Human");

                    b.Property<DateTime>("AbonementActionTime");

                    b.Property<DateTime>("AbonementDateOfRegistration");

                    b.Property<int>("AbonementNumber");

                    b.Property<int>("AbonementStatusId");

                    b.Property<int>("AbonementTypeId");

                    b.Property<string>("PasportData");

                    b.Property<string>("PasswordHash");

                    b.HasIndex("AbonementStatusId");

                    b.HasIndex("AbonementTypeId");

                    b.ToTable("Client");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("FC_EMDB.Entities.Entities.Employee", b =>
                {
                    b.HasBaseType("FC_EMDB.Entities.Entities.Human");

                    b.Property<string>("Desc");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnName("Employee_PasswordHash")
                        .HasMaxLength(50);

                    b.Property<int?>("RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("Employee");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("FC_EMDB.Entities.Entities.CoachTraining", b =>
                {
                    b.HasOne("FC_EMDB.Entities.Entities.Employee", "Coach")
                        .WithMany("CoachTrainings")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FC_EMDB.Entities.Entities.Training", "Training")
                        .WithMany("CoachTrainings")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FC_EMDB.Entities.Entities.ReplcedTraining", b =>
                {
                    b.HasOne("FC_EMDB.Entities.Entities.TrainingData", "TrainingData")
                        .WithMany("ReplacedTrainings")
                        .HasForeignKey("TrainingDataId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FC_EMDB.Entities.Entities.Training", "Training")
                        .WithMany("ReplcedTrainings")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FC_EMDB.Entities.Entities.Training", b =>
                {
                    b.HasOne("FC_EMDB.Entities.Entities.Gym", "Gym")
                        .WithMany("Trainings")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FC_EMDB.Entities.Entities.TrainingClient", b =>
                {
                    b.HasOne("FC_EMDB.Entities.Entities.Client", "Client")
                        .WithMany("TrainingClients")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FC_EMDB.Entities.Entities.Training", "Training")
                        .WithMany("TrainingClients")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FC_EMDB.Entities.Entities.TrainingData", b =>
                {
                    b.HasOne("FC_EMDB.Entities.Entities.TrainingLevel", "Level")
                        .WithMany("TrainingDatas")
                        .HasForeignKey("LevelId");

                    b.HasOne("FC_EMDB.Entities.Entities.ProgramType", "ProgramType")
                        .WithMany("TrainingDatas")
                        .HasForeignKey("ProgramTypeId");
                });

            modelBuilder.Entity("FC_EMDB.Entities.Entities.TrainingDataTraining", b =>
                {
                    b.HasOne("FC_EMDB.Entities.Entities.TrainingData", "TrainingData")
                        .WithMany("TrainingDataTrainings")
                        .HasForeignKey("TrainingDataId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FC_EMDB.Entities.Entities.Training", "Training")
                        .WithMany("TrainingDataTrainings")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FC_EMDB.Entities.Entities.Client", b =>
                {
                    b.HasOne("FC_EMDB.Entities.Entities.AbonementStatus", "AbonementStatus")
                        .WithMany("Clients")
                        .HasForeignKey("AbonementStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FC_EMDB.Entities.Entities.AbonementType", "AbonementType")
                        .WithMany("Clients")
                        .HasForeignKey("AbonementTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FC_EMDB.Entities.Entities.Employee", b =>
                {
                    b.HasOne("FC_EMDB.Entities.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");
                });
#pragma warning restore 612, 618
        }
    }
}
